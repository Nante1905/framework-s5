<import>

const [entityMaj]Form = (props: [entityMaj]Props) => {
  const [state, setState] = useState<[entityMaj]State>(initialState);
  useEffect(() => {}, []);

  <foreignKeyGetter>  

  const onSubmit = async (data: any) => {
    setState((state) => ({
      ...state,
      sendLoading: true,
    }));
    let url = `${URL_API}/insert[entityMin].do`;
    if (props.id) {
      url = `${URL_API}/update[entityMin].do`;
    }
    const options = {
      method: "POST",
      headers: { "content-type": "application/x-www-form-urlencoded" },
      data: qs.stringify({
        ...data,
      }),
      url,
    };
    const res = await axios(options);
    console.log(res);
    if (!res.data.data) {
      setState((state) => ({
        ...state,
        error: (res.data as string).includes("Exception")
          ? "Une erreur s'est produite"
          : res.data,
      }));
    } else {
      setState((state) => ({
        ...state,
        success: "Enregistré",
      }));
    }
  };

  const { register, formState, handleSubmit, control } = useForm({
    defaultValues: props.id
      ? async () =>
          (await axios.get(`${URL_API}/[entityMin].do?[entityPkField]=${props.id}`)).data
            .data?.[0]
      : undefined,
  });
  const sleep = (ms: any) => new Promise((resolve) => setTimeout(resolve, ms));

  return (
    <>
      <div className="crud-form-wrapper">
        <h1 className="text-center">
          {props.id ? "Modification" : "Création"} [entityMaj]
        </h1>
        {state.loading || formState.isLoading ? (
          <CircularProgress />
        ) : (
          <form
            className="form-content"
            onSubmit={handleSubmit(async (data) => {
              console.log(data);
              await onSubmit(data);
            })}
          >
            <input>
            <div className="inline-flex-center vertical-margin">
              <Button variant="contained" type="submit">
                {formState.isSubmitting ? (
                  <CircularProgress
                    sx={{
                      width: "20px !important",
                      height: "20px !important",
                      color: "white",
                    }}
                  />
                ) : (
                  <>Valider</>
                )}
              </Button>
            </div>
          </form>
        )}
      </div>
      <ErrorSnackBar
        open={state.error !== null}
        onClose={() =>
          setState(() => ({
            ...state,
            error: null,
          }))
        }
        error={state.error as string}
      />
      <SuccessSnackBar
        open={state.success !== null}
        onClose={() =>
          setState(() => ({
            ...state,
            success: null,
          }))
        }
        message={state.success as string}
      />
    </>
  );
};

interface [entityMaj]Props {
  id?: string;
  onClose?: () => void;
}

interface [entityMaj]State {
  loading: boolean;
  sendLoading: boolean;
  error: string | null;
  success: string | null;
  marque: Marque[];
}

const initialState: [entityMaj]State = {
  loading: false,
  sendLoading: false,
  error: null,
  success: null,
  marque: [],
};

export default [entityMaj]Form;
