[namespace] [package];

[imports]

public class JWTService {
    // CHANGE TO YOU OWN SECRET KEY
    private static final String secret = "03468b2045db794e2cb0c1a5671e82e81c1f258ad04285327a8ae45b05ec3799";
    private static final Key key = new SecretKeySpec(Base64.getDecoder().decode(secret),
            SignatureAlgorithm.HS256.getJcaName());

    public String generateToken(Auth auth) {
        Date currentDate = new Date();
        String token = Jwts.builder().setSubject(auth.getEmail()).setIssuedAt(currentDate)
                .setExpiration(new Date(currentDate.getTime() + dayToMs(1)))
                .claim("[pseudoField]", auth.get[pseudoFieldMaj]())
                .signWith(SignatureAlgorithm.HS256, key).compact();
        return token;

    }

    public String getJWTFromRequest(HttpServletRequest request) {
        String bearerToken = request.getHeader("Authorization");
        if (bearerToken != null && !bearerToken.isBlank() && bearerToken.startsWith("Bearer ")) {
            return bearerToken.substring(7, bearerToken.length());
        }
        return null;
    }

    public boolean validateToken(String token)
            throws ExpiredJwtException, UnsupportedJwtException, MalformedJwtException {
        Jwts.parser().setSigningKey(key).parseClaimsJws(token);
        return true;
    }

    public Claims parseToken(String token) {
        return Jwts.parser().setSigningKey(key).parseClaimsJws(token).getBody();
    }

    private long dayToMs(long day) {
        return 1000 * day * 24 * 60 * 60;
    }

}
